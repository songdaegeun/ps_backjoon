#include <iostream>
using namespace std;

int n,m,k;
int A[11][11];		// 양분 투입량
vector<int> state[11][11][3];	// [3]: {현재양분, 현재나이, 생존상태}
 
void spring() {

}

void summer() {

}

void fall() {

}

void winter() {

}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    
	cin >> n >> m >> k;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			// 양분 투입량 load
			cin >> A[i][j];
			// 현재양분 5로 초기화
			state[i][j][0].push_back(5);
		}
	}
	while (m--)
	{
		int x,y,z;
		cin >> x >> y >> z;
		// 현재나이 load
		state[x][y][1].push_back(z);
	}
	while(k--) {
		spring();
		summer();
		fall();
		winter();		
	}

	int cnt = 0;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			// 살아있는 나무를 센다.
		}
	}
	cout << cnt << '\n';
}

// 봄에는 나무가 자신의 나이만큼 양분을 먹고, 나이가 1 증가한다. 
// 각각의 나무는 나무가 있는 1×1 크기의 칸에 있는 양분만 먹을 수 있다. 하나의 칸에 여러 개의 나무가 있다면, 나이가 어린 나무부터 양분을 먹는다. 
// 만약, 땅에 양분이 부족해 자신의 나이만큼 양분을 먹을 수 없는 나무는 양분을 먹지 못하고 즉시 죽는다.

// 여름에는 봄에 죽은 나무가 양분으로 변하게 된다. 각각의 죽은 나무마다 나이를 2로 나눈 값이 나무가 있던 칸에 양분으로 추가된다.
// 소수점 아래는 버린다.

// 가을에는 나무가 번식한다. 번식하는 나무는 나이가 5의 배수이어야 하며, 인접한 8개의 칸에 나이가 1인 나무가 생긴다. 
// 어떤 칸 (r, c)와 인접한 칸은 (r-1, c-1), (r-1, c), (r-1, c+1), (r, c-1), (r, c+1), (r+1, c-1), (r+1, c), (r+1, c+1) 이다.
// 상도의 땅을 벗어나는 칸에는 나무가 생기지 않는다.

// 겨울에는 S2D2가 땅을 돌아다니면서 땅에 양분을 추가한다.
// 각 칸에 추가되는 양분의 양은 A[r][c]이고, 입력으로 주어진다

// 첫째 줄에 K년이 지난 후 살아남은 나무의 수를 출력한다.


// 5 2 3
// 2 3 2 3 2
// 2 3 2 3 2
// 2 3 2 3 2
// 2 3 2 3 2
// 2 3 2 3 2
// 2 1 3
// 3 2 3